/**  
 * @author: lujingrui
 * @date: 2017 - 3 - 3 
 * @last modified by: lujingrui 
 * @last modified time: 2017 - 4 - 13
 * @file: 测试桩管理主页面左侧树操作逻辑
 */
// 全局变量 管线id
var pipelineid = "";

//全局变量 判断是否在能在该管线下添加测试桩
var isAdd;

// 全局变量 token
var token = "";

// 全局变量 管线名称
var pipelinenameForTable = "";

$(window).resize(function() {
    // var window_h = $(window).height();
    // var window_w = $(window).width();
    // $(".divider").css("height", window_h + "px");
    // $(".treeview").css("height", window_h - 38 + "px");
    // var w = window_w - $("div-left").width();
    // $(".div-right").css("width", w + "px");
    var window_h = $(window).height();
    var window_w = $(window).width();
    $("body").css("height", window_h - 2 + "px");
    $(".treeview").css("height", window_h - 38 + "px");
    $(".divider").css("height", window_h + "px");
    $("body").css("width", window_w + "px");
    var w = window_w - $("div-left").width();
    $(".div-right").css("width", w + "px");
});
// 初始化方法
$(document).ready(function() {
    var userBo=JSON.parse(lsObj.getLocalStorage("userBo"));
	console.log(userBo.enterpriseId);
    // 调整管线树列表div，使其高度等于屏幕高度
    var window_h = $(window).height();
    $("body").css("height", window_h + "px");
    $(".treeview").css("height", window_h - 38 + "px");
    $(".divider").css("height", window_h + "px");
    var w = $(window).width() - 230;
    $(".div-right").css("width", w + "px");
    // 获取token
    token = lsObj.getLocalStorage("token");
     $.jstree.defaults.core.themes.dots = false;
    $('#treeview').jstree({
            core: {
                multiple: false,
                animation: 0,
                check_callback: function(operation, node, node_parent, node_position, more) {
                    // operation can be 'create_node', 'rename_node', 'delete_node', 'move_node' or 'copy_node'
                    // in case of 'rename_node' node_position is filled with the new node name
                    if (operation === "move_node" && more.pos === "i") {
                        console.log(111);
                        // console.log(node_parent);
                        // console.log(node_position);
                        if(node_parent.parent == null ){
                            return true;
                        }
                        return node_parent.original.type === "default"; //only allow dropping inside nodes of type 'Parent'
                    }
                    return true;  //allow all other operations
                },
                //强制将节点文本转换为纯文本，默认为false
                force_text : true,
                data: function(obj, cb) {
                    var dataItem;
                    $.ajax({
                            url: handleURL('/cloudlink-corrosionengineer/pipemanage/queryTree?token=' + token),
                            method: "get",
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            async: false
                        })
                        .done(function(res) {
                            if (res.success == 1) {
                                dataItem = res.tree;
                                console.log(dataItem);
                            } else {
                                layer.msg(res.msg, { skin: "self-success" });
                            }
                        })
                        // .fail(function() {
                        //     layer.msg('查询失败！',{skin:"self-success"});
                        // });
                    cb.call(this, dataItem);
                }
            },
            sort : function(a, b) {
                        return this.get_node(a).original.orderNumber-0 > this.get_node(b).original.orderNumber-0 ? 1 : -1;
                        // return this.get_type(a) === this.get_type(b) ? (this.get_text(a) > this.get_text(b) ? 1 : -1) : (this.get_type(a) >= this.get_type(b) ? 1 : -1);
                },
            contextmenu: {
                items: function(node) {
                    var tmp = $.jstree.defaults.contextmenu.items();
                    delete tmp.create.action;
                    delete tmp.ccp;
                    tmp.create.label = "新建";
                    tmp.create.submenu = {
                        "create_folder": {
                            //"separator_after": true,
                            "label": "目录",
                            "action": function(data) {
                                var inst = $.jstree.reference(data.reference),
                                    obj = inst.get_node(data.reference);
                                var nodes = inst.get_node(obj).children;
                                layer.prompt({ title: '请输入目录名称', skin: 'self' }, function(val, index) {
                                    var flag = true;
                                    for (var i = 0; i < nodes.length; i++) {
                                        var nodeName = inst.get_node(nodes[i]).text;
                                        if (nodeName.trim() == val.trim()) {
                                            flag = false;
                                        }
                                    }
                                    if (flag) {
                                        // deselectNode();
                                        inst.create_node(obj, { text: val, type: "default" });
                                        // setNodeSelect(obj.id);
                                    } else {
                                        layer.msg("已存在该名称", { skin: "self-success" });
                                        layer.close(index);
                                    }
                                });
                            }
                        },
                        "create_file": {
                            "label": "管线",
                            "action": function(data) {
                                var inst = $.jstree.reference(data.reference),
                                    obj = inst.get_node(data.reference);
                                var nodes = inst.get_node(obj).children;
                                layer.prompt({ title: '请输入阴保管段名称', skin: 'self' }, function(val, index) {
                                    var flag = true;
                                    for (var i = 0; i < nodes.length; i++) {
                                        var nodeName = inst.get_node(nodes[i]).text;
                                        if (nodeName.trim() == val.trim()) {
                                            flag = false;
                                        }
                                    }
                                    if (flag) {
                                        inst.create_node(obj, { text: val, type: "file" });
                                    } else {
                                        layer.msg("已存在该名称", { skin: "self-success" });
                                        layer.close(index);
                                    }
                                });
                            }
                        }
                    };
                    tmp.rename.label = "重命名";
                    // tmp.remove.label = "删除";
                    tmp.remove = {
                            "label": "删除",
                            "action": function(data) {
                                var inst = $.jstree.reference(data.reference),
                                obj = inst.get_node(data.reference);
                                $.ajax({
                                    url: "/cloudlink-corrosionengineer/pipemanage/verifyBottom?token=" + token,
                                    method: 'POST',
                                    contentType: "application/json; charset=utf-8",
                                    dataType: 'JSON',
                                    // async:false,
                                    data: JSON.stringify({
                                        "objectId": obj.id,
                                    })
                                })
                                .done(function(result) {
                                    if (result.success == 1) {
                                        layer.msg(result.msg, { skin: "self-success" });
                                    } else {
                                        layer.confirm('请确定删除该管线下没有包含测试桩的管线', {
                                            btn: ['删除', '取消'], //按钮
                                            skin: "self",
                                            yes: function() {
                                                inst.delete_node(obj);
                                            },
                                            cancel: function() {}
                                        });
                                    }
                                })
                            }
                        }
                    if (this.get_type(node) === "file") {
                        delete tmp.create;
                    }
                    
                    if (judgePrivilege()) {
                        delete tmp.create;
                        delete tmp.remove;
                        delete tmp.rename;
                    }
                    return tmp;
                }


            },
            dnd:{
                is_draggable:function(node){
                    
                    return true;
                },
                check_while_dragging:true,
                copy:false
            },
            types: {
                default: {
                    icon: 'folder-icon'
                },
                file: {
                    icon: 'file-icon',
                    valid_children: []
                }
            },
            plugins: ['contextmenu', "types", "sort",'dnd']
        })
        .on('loaded.jstree', function(e, data) {
            var inst = data.instance;
            //默认展开全部节点 
            inst.open_all();

            var obj = inst.get_node("#").children[0];
            inst.select_node(obj);
        })
        // .on('changed.jstree', function(e, data) {
        //     //console.log(data);
        //     // refreshTree();
        // })
        // .on('select_node.jstree', function(e, data) {
        //     //console.log(data);
        //     // setNodeSelect(data.node.parent);
        // })
        .on('create_node.jstree', function(e, data) {
            // console.log(data);
            var treeType='';
            if (data.node.type == "default") {
                treeType="default";
            }else{
                treeType="file";
            }
            $.ajax({
                url:"/cloudlink-corrosionengineer/pipemanage/addTree?token=" + token,
                method: 'POST',
                contentType: "application/json; charset=utf-8",
                dataType: 'JSON',
                data: JSON.stringify({
                    parentId: data.parent || data.node.parent,
                    pipelineName: data.node.text,
                    treeType:treeType
                })
            })
            .done(function(res) {
                if (res.success == 1) {
                    var inst = $('#treeview').jstree(true);
                    var node = inst.get_node(data.node);
                    var cbk = function() {
                        deselectNode();
                        setNodeSelect(res.objectid);
                    }
                    data.instance.refresh_cbk(cbk);
                    layer.msg("添加成功！", { skin: "self-success" });
                    try {
                        if (zhugeSwitch == 1) {
                            zhuge.track('新建管线', { '结果': '成功' });
                        }
                    } catch (err) {
                        //在此处理错误
                    }
                }  else if (result.success == 0) {
                    layer.msg(result.msg, { skin: "self-success" });
                    try {
                        if (zhugeSwitch == 1) {
                            zhuge.track('新建管线', { '结果': '失败' });
                        }
                    } catch (err) {
                        //在此处理错误
                    }
                } else {
                    layer.msg(result.msg, { skin: "self-success" });
                    try {
                        if (zhugeSwitch == 1) {
                            zhuge.track('新建管线', { '结果': '失败' });
                        }
                    } catch (err) {
                        //在此处理错误
                    }
                }

            })
             
        })
        .on('rename_node.jstree', function(e, data) {
            var flag = 0;
            var inst = $('#treeview').jstree(true);
            var nodes = inst.get_node(data.node.parent).children;
            for (var i = 0; i < nodes.length; i++) {
                var nodeName = inst.get_node(nodes[i]).text;
                if (nodeName.trim() == data.node.text.trim()) {
                    flag++;
                }
            }
            if (flag > 1) {
                layer.confirm('已存在该文件名，请重命名！', {
                    btn: ['确定'], //按钮
                    skin: 'self'
                });
                data.instance.refresh();
                // layer.confirm('已存在该文件名，请重命名！',{btn:0,time:2000,skin:'message-skin',closeBtn: 0});
            } else {
                $.ajax({
                        url: "/cloudlink-corrosionengineer/pipemanage/renameTree?token=" + token,
                        method: 'POST',
                        contentType: "application/json; charset=utf-8",
                        dataType: 'JSON',
                        data: JSON.stringify({
                            'objectId': data.node.id,
                            'parentId': data.node.parent,
                            'pipelineName': data.node.text.trim()

                        })
                    })
                    .done(function(res) {
                        if (res.success == 1) {
                            // data.instance.set_id(data.node, data.node.id);
                            // data.instance.set_text(data.node, data.node.text);
                            // layer.confirm('修改成功！',{btn:0,time:1000,skin:'message-skin',closeBtn: 0});
                            layer.msg("修改成功", { skin: "self-success" });
                            data.instance.refresh();
                            // try{
                            //     if(zhugeSwitch==1){
                            //         zhuge.track('阴保分段',{'操作':'修改树节点名称'});
                            //     }
                            // }catch(err){
                            //     //在此处理错误
                            // }
                        } else {
                            layer.msg(res.msg, { skin: "self-success" });
                            data.instance.refresh();
                        }

                    })
                    // .fail(function() {
                    //     // layer.confirm('修改失败！',{btn:0,time:1000,skin:'message-skin',closeBtn: 0});
                    //     layer.confirm('修改失败！', {
                    //         btn: ['确定'], //按钮
                    //         skin: 'self'
                    //     });
                    //     data.instance.refresh();
                    // });
            }
        })
        .on('move_node.jstree', function(e, data) {
            console.log(data);
            var inst = $('#treeview').jstree(true);
            var obj = inst.get_node(data.parent);
            var children_s = obj.children;
            var updateHierarchy = [];
            for(var i=0;i<children_s.length;i++){
                var list=[];
                list.push(data.parent);
                list.push(i+1);
                list.push(children_s[i]);
                updateHierarchy.push(list);
            }
            $.ajax({
                url: "/cloudlink-corrosionengineer/pipemanage/updateHierarchy?token=" + token,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                method: "post",
                async: false,
                data: JSON.stringify({
                    'updateHierarchy': updateHierarchy
                }),
                success: function(result) {
                    if (result.success == 1) {
                        // data.instance.refresh();
                        layer.msg("移动成功", { skin: "self-success" });
                    }  else {
                        data.instance.refresh();
                        layer.msg(result.msg, { skin: "self-success" });
                        // layer.confirm(result.msg,{btn:0,time:2000,skin:'self',closeBtn: 0});
                    }
                }
            });
        })
        .on('delete_node.jstree', function(e, data) {
            $.ajax({
                url: "/cloudlink-corrosionengineer/pipemanage/deleteTree?token=" + token,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                method: "post",
                async: false,
                data: JSON.stringify({
                    'objectId': data.node.id
                }),
                success: function(result) {
                    if (result.success == 1) {
                        query();
                        if (data.node.id == pipelineid) {
                            pipelineid = "";
                        }
                        isAdd = 0;
                        normalRefresh();
                        layer.msg("删除成功", { skin: "self-success" });
                        try {
                            if (zhugeSwitch == 1) {
                                zhuge.track('删除管线', { '结果': '成功' });
                            }
                        } catch (err) {
                            //在此处理错误
                        }
                    } else if (result.success == 0) {
                        normalRefresh();
                        layer.confirm(result.msg, {
                            btn: ['确定'], //按钮
                            skin: 'self'
                        });
                        try {
                            if (zhugeSwitch == 1) {
                                zhuge.track('删除管线', { '结果': '成功' });
                            }
                        } catch (err) {
                            //在此处理错误
                        }
                    } else {
                        normalRefresh();
                        layer.confirm(result.msg, {
                            btn: ['确定'], //按钮
                            skin: 'self'
                        });
                        try {
                            if (zhugeSwitch == 1) {
                                zhuge.track('删除管线', { '结果': '失败' });
                            }
                        } catch (err) {
                            //在此处理错误
                        }
                    }
                }
            });

            
                    // .fail(function() {
                    //     layer.confirm('删除失败！', {
                    //         btn: ['确定'], //按钮
                    //         skin: 'self'
                    //     });
                    //     normalRefresh();
                    //     // layer.confirm('删除失败！',{btn:0,time:2000,skin:'message-skin',closeBtn: 0});
                    // });
        })
        .on('select_node.jstree', function(e, data) {
            pipelineid = data.node.id;
            pipelinenameForTable = encodeURI(data.node.text.trim());
            // $.ajax({
            //     url: "/cloudlink-corrosionengineer/pipemanage/verifyImport?token=" + token + "&objectId=" + pipelineid,
            //     contentType: "application/json; charset=utf-8",
            //     dataType: "json",
            //     method: "get",
            //     async: false,
            //     success: function(result) {
            //         if (result.success == 1) {
            //             isAdd = 1; //可以添加测试桩
            //         } else {
            //             isAdd = 0; //不能添加测试桩
            //         }
            //     }
            // });
            if(data.node.type == "file"){
                isAdd = 1; //可以添加测试桩
            }else{
                isAdd = 0; //不能添加测试桩
            }
            query(data.node.id);
            $('#tb-datacollection').bootstrapTable('refresh', true);

        });
});

function addParentNode() {
    var inst = $('#treeview').jstree(true);
    var obj = inst.get_node("#");
    var nodes = inst.get_node("#").children;
    layer.prompt({ title: '请输入目录名称', skin: 'self' }, function(val, index) {
        var flag = true;
        for (var i = 0; i < nodes.length; i++) {
            var nodeName = inst.get_node(nodes[i]).text;
            if (nodeName.trim() == val.trim()) {
                flag = false;
            }
        }
        if (flag) {
            // deselectNode();
            inst.create_node(obj, { text: val.trim(), type: "default" });
            // setNodeSelect(obj.id);
        } else {
            layer.msg("已存在该名称", { skin: "self-success" });
            layer.close(index);
        }
    });
}

function deselectNode() {
    $('#treeview').jstree(true).deselect_all();
}

//使某个节点处于选中状态
function setNodeSelect(nodeId) {
    $('#treeview').jstree(true).select_node(nodeId);
}

function normalRefresh() {
    $('#treeview').jstree(true).refresh();
}




//拖放树div
$(".divider i").click(function() {
    var w = $(window).width() - 230;
    var flag = $(".div-left").hasClass("tohide");
    if (flag) {
        $(".div-left").animate({ width: "0px" });
        $(".div-right").animate({ width: "100%" }, function() {
            $('#table_hr').bootstrapTable('resetView');
        })
        $(".div-left").removeClass("tohide");
        $(".divider").addClass("ishide");
    } else {
        $(".div-left").animate({ width: "230px" });
        $(".div-right").animate({ width: w + "px" }, function() {
            $('#table_hr').bootstrapTable('resetView');
        });
        $(".div-left").addClass("tohide");
        $(".divider").removeClass("ishide");
    }

});

$("#divider").off('mousedown');
$("#divider").on('mousedown', function(e) {
    var leftWidthStart = $(".div-left").width();
    var rightWidthStart = $(".div-right").width();
    var mouseStart = { x: e.pageX };

    function mv(e) {
        var w_left = leftWidthStart + e.pageX - mouseStart.x + 'px';
        var w_right = rightWidthStart - (e.pageX - mouseStart.x) + 'px';
        $(".div-left").width(w_left);
        $(".div-right").width(w_right);
        $('#table_hr').bootstrapTable('resetView');
    }
    $(window).off('dragstart');
    $(window).on('dragstart', function(e) { e.preventDefault() });
    $(window).off('mousemove');
    $(window).on('mousemove', mv);
    $(window).off('mouseup');
    $(window).on('mouseup', function(e) {
        $(window).off('mousemove');
    });
    // IE阻止事件冒泡
    event.cancelBubble = true;
    event.returnValue = false;
    //以下是针对非IE浏览器的 阻止事件冒泡
    event.stopPropagation();
    event.preventDefault();
});

// var o=document.getElementById("divider");		
// o.addEventListener('mousedown', function(e) {
//     var leftWidthStart = $(".div-left").width();
//     var rightWidthStart = $(".div-right").width();
//     var mouseStart = {x:e.pageX};
//     function mv(e) {
//        var w_left = leftWidthStart+e.pageX - mouseStart.x + 'px';
//        var w_right = rightWidthStart-(e.pageX - mouseStart.x) + 'px';
//         $(".div-left").width(w_left);
//         $(".div-right").width(w_right);	
//         $('#table_hr').bootstrapTable('resetView');
//     }
//     document.addEventListener('dragstart', function(e) {e.preventDefault()});
//     document.addEventListener('mousemove', mv);
//     document.addEventListener('mouseup', function(e) {
//             document.removeEventListener('mousemove', mv);
//         });
// });